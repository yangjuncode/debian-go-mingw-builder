Subject: [PATCH] Revert "os: remove 5ms sleep on Windows in (*Process).Wait"
---
Index: src/os/exec_windows.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/os/exec_windows.go b/src/os/exec_windows.go
--- a/src/os/exec_windows.go	(revision 456967ebbe97d5dd66f1c9b331e19a35abc9fb59)
+++ b/src/os/exec_windows.go	(revision db93054ab97c05744d7a13bcb9cf87fe2507d4aa)
@@ -44,6 +44,12 @@
 	if e != nil {
 		return nil, NewSyscallError("GetProcessTimes", e)
 	}
+	// NOTE(brainman): It seems that sometimes process is not dead
+	// when WaitForSingleObject returns. But we do not know any
+	// other way to wait for it. Sleeping for a while seems to do
+	// the trick sometimes.
+	// See https://golang.org/issue/25965 for details.
+	defer time.Sleep(5 * time.Millisecond)
 	defer p.Release()
 	return &ProcessState{p.Pid, syscall.WaitStatus{ExitCode: ec}, &u}, nil
 }
Index: src/os/exec_windows_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/os/exec_windows_test.go b/src/os/exec_windows_test.go
deleted file mode 100644
--- a/src/os/exec_windows_test.go	(revision 456967ebbe97d5dd66f1c9b331e19a35abc9fb59)
+++ /dev/null	(revision 456967ebbe97d5dd66f1c9b331e19a35abc9fb59)
@@ -1,83 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-//go:build windows
-
-package os_test
-
-import (
-	"internal/testenv"
-	"io"
-	. "os"
-	"path/filepath"
-	"sync"
-	"testing"
-)
-
-func TestRemoveAllWithExecutedProcess(t *testing.T) {
-	// Regression test for golang.org/issue/25965.
-	if testing.Short() {
-		t.Skip("slow test; skipping")
-	}
-	testenv.MustHaveExec(t)
-
-	name, err := Executable()
-	if err != nil {
-		t.Fatal(err)
-	}
-	r, err := Open(name)
-	if err != nil {
-		t.Fatal(err)
-	}
-	defer r.Close()
-	const n = 100
-	var execs [n]string
-	// First create n executables.
-	for i := 0; i < n; i++ {
-		// Rewind r.
-		if _, err := r.Seek(0, io.SeekStart); err != nil {
-			t.Fatal(err)
-		}
-		name := filepath.Join(t.TempDir(), "test.exe")
-		execs[i] = name
-		w, err := Create(name)
-		if err != nil {
-			t.Fatal(err)
-		}
-		if _, err = io.Copy(w, r); err != nil {
-			w.Close()
-			t.Fatal(err)
-		}
-		if err := w.Sync(); err != nil {
-			w.Close()
-			t.Fatal(err)
-		}
-		if err = w.Close(); err != nil {
-			t.Fatal(err)
-		}
-	}
-	// Then run each executable and remove its directory.
-	// Run each executable in a separate goroutine to add some load
-	// and increase the chance of triggering the bug.
-	var wg sync.WaitGroup
-	wg.Add(n)
-	for i := 0; i < n; i++ {
-		go func(i int) {
-			defer wg.Done()
-			name := execs[i]
-			dir := filepath.Dir(name)
-			// Run test.exe without executing any test, just to make it do something.
-			cmd := testenv.Command(t, name, "-test.run=^$")
-			if err := cmd.Run(); err != nil {
-				t.Errorf("exec failed: %v", err)
-			}
-			// Remove dir and check that it doesn't return `ERROR_ACCESS_DENIED`.
-			err = RemoveAll(dir)
-			if err != nil {
-				t.Errorf("RemoveAll failed: %v", err)
-			}
-		}(i)
-	}
-	wg.Wait()
-}
